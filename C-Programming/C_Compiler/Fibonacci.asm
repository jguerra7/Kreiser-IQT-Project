; Listing generated by Microsoft (R) Optimizing Compiler Version 19.14.26433.0 

	TITLE	C:\IQTRepo\Project\C-Programming\Ch8labs\Fibonacci.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	__vfscanf_l
PUBLIC	_scanf
PUBLIC	_fibonacci_number
PUBLIC	_error_reporting
PUBLIC	_main
EXTRN	___acrt_iob_func:PROC
EXTRN	__flushall:PROC
EXTRN	_getchar:PROC
EXTRN	_perror:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	___stdio_common_vfscanf:PROC
EXTRN	__wassert:PROC
EXTRN	__errno:PROC
EXTRN	_strerror:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_DATA	SEGMENT
$SG7433	DB	'How many Fibonacci numbers would you like to print? ', 0aH
	DB	00H
	ORG $+2
$SG7434	DB	'%d', 00H
	ORG $+1
$SG7436	DB	'F', 00H, 'i', 00H, 'b', 00H, 'o', 00H, 'n', 00H, 'a', 00H
	DB	'c', 00H, 'c', 00H, 'i', 00H, '.', 00H, 'c', 00H, 00H, 00H
$SG7437	DB	'n', 00H, 'u', 00H, 'm', 00H, 'b', 00H, 'e', 00H, 'r', 00H
	DB	'F', 00H, 'i', 00H, 'b', 00H, 'o', 00H, 'n', 00H, 'a', 00H, 'c'
	DB	00H, 'c', 00H, 'i', 00H, 'N', 00H, 'u', 00H, 'm', 00H, 'b', 00H
	DB	'e', 00H, 'r', 00H, 's', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H
	ORG $+2
$SG7438	DB	'******************', 0aH, 00H
$SG7439	DB	'FIBONACCI SEQUENCE', 0aH, 00H
$SG7440	DB	'******************', 0aH, 00H
$SG7441	DB	'%d', 0aH, 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_currentFibNum$ = -16					; size = 4
_numberFibonacciNumbers$ = -12				; size = 4
_currentErr$ = -8					; size = 4
_i$ = -4						; size = 4
_main	PROC
; File c:\iqtrepo\project\c-programming\ch8labs\fibonacci.c
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 20
	mov	DWORD PTR _i$[ebp], 0
; Line 21
	mov	DWORD PTR _numberFibonacciNumbers$[ebp], 0
; Line 22
	mov	DWORD PTR _currentFibNum$[ebp], 0
; Line 23
	mov	DWORD PTR _currentErr$[ebp], 0
; Line 25
	push	OFFSET $SG7433
	call	_printf
	add	esp, 4
; Line 26
	call	__flushall
; Line 27
	lea	eax, DWORD PTR _numberFibonacciNumbers$[ebp]
	push	eax
	push	OFFSET $SG7434
	call	_scanf
	add	esp, 8
; Line 28
	call	__errno
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _currentErr$[ebp], ecx
; Line 29
	cmp	DWORD PTR _currentErr$[ebp], 0
	je	SHORT $LN5@main
; Line 31
	mov	edx, DWORD PTR _currentErr$[ebp]
	push	edx
	call	_error_reporting
	add	esp, 4
$LN5@main:
; Line 34
	cmp	DWORD PTR _numberFibonacciNumbers$[ebp], 0
	jg	SHORT $LN7@main
	push	34					; 00000022H
	push	OFFSET $SG7436
	push	OFFSET $SG7437
	call	__wassert
	add	esp, 12					; 0000000cH
$LN7@main:
; Line 37
	push	OFFSET $SG7438
	call	_printf
	add	esp, 4
; Line 38
	push	OFFSET $SG7439
	call	_printf
	add	esp, 4
; Line 39
	push	OFFSET $SG7440
	call	_printf
	add	esp, 4
; Line 40
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@main:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numberFibonacciNumbers$[ebp]
	jge	SHORT $LN3@main
; Line 42
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_fibonacci_number
	add	esp, 4
	mov	DWORD PTR _currentFibNum$[ebp], eax
; Line 43
	mov	ecx, DWORD PTR _currentFibNum$[ebp]
	push	ecx
	push	OFFSET $SG7441
	call	_printf
	add	esp, 8
; Line 45
	jmp	SHORT $LN2@main
$LN3@main:
; Line 47
	call	_getchar
	call	_getchar
; Line 48
	xor	eax, eax
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_currErrno$ = 8						; size = 4
_error_reporting PROC
; File c:\iqtrepo\project\c-programming\ch8labs\fibonacci.c
; Line 76
	push	ebp
	mov	ebp, esp
; Line 77
	cmp	DWORD PTR _currErrno$[ebp], 0
	je	SHORT $LN1@error_repo
; Line 79
	mov	eax, DWORD PTR _currErrno$[ebp]
	push	eax
	call	_strerror
	add	esp, 4
	push	eax
	call	_perror
	add	esp, 4
$LN1@error_repo:
; Line 83
	pop	ebp
	ret	0
_error_reporting ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_returnValue$ = -4					; size = 4
_sequenceNumber$ = 8					; size = 4
_fibonacci_number PROC
; File c:\iqtrepo\project\c-programming\ch8labs\fibonacci.c
; Line 52
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
; Line 55
	cmp	DWORD PTR _sequenceNumber$[ebp], 0
	jge	SHORT $LN2@fibonacci_
; Line 57
	mov	DWORD PTR _returnValue$[ebp], -1
; Line 58
	jmp	SHORT $LN3@fibonacci_
$LN2@fibonacci_:
; Line 59
	cmp	DWORD PTR _sequenceNumber$[ebp], 0
	jne	SHORT $LN4@fibonacci_
; Line 61
	mov	DWORD PTR _returnValue$[ebp], 0
; Line 62
	jmp	SHORT $LN3@fibonacci_
$LN4@fibonacci_:
; Line 63
	cmp	DWORD PTR _sequenceNumber$[ebp], 1
	jne	SHORT $LN6@fibonacci_
; Line 65
	mov	DWORD PTR _returnValue$[ebp], 1
; Line 66
	jmp	SHORT $LN3@fibonacci_
$LN6@fibonacci_:
; Line 69
	mov	eax, DWORD PTR _sequenceNumber$[ebp]
	sub	eax, 1
	push	eax
	call	_fibonacci_number
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _sequenceNumber$[ebp]
	sub	ecx, 2
	push	ecx
	call	_fibonacci_number
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _returnValue$[ebp], esi
$LN3@fibonacci_:
; Line 72
	mov	eax, DWORD PTR _returnValue$[ebp]
; Line 73
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_fibonacci_number ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _scanf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_scanf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 1280
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 1283
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 1284
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	0
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfscanf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 1285
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 1286
	mov	eax, DWORD PTR __Result$[ebp]
; Line 1287
	mov	esp, ebp
	pop	ebp
	ret	0
_scanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfscanf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfscanf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 1062
	push	ebp
	mov	ebp, esp
; Line 1063
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfscanf
	add	esp, 24					; 00000018H
; Line 1066
	pop	ebp
	ret	0
__vfscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 954
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 957
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 958
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 959
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 960
	mov	eax, DWORD PTR __Result$[ebp]
; Line 961
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 644
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
; Line 94
	push	ebp
	mov	ebp, esp
; Line 96
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
; Line 97
	pop	ebp
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
; Line 85
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 88
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
